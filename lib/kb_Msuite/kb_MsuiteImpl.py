# -*- coding: utf-8 -*-
#BEGIN_HEADER
import os
import json

from pprint import pprint

from kb_Msuite.Utils.CheckMUtil import CheckMUtil
from kb_Msuite.Utils.DataStagingUtils import DataStagingUtils
#END_HEADER


class kb_Msuite:
    '''
    Module Name:
    kb_Msuite

    Module Description:
    A KBase module: kb_Msuite
This SDK module is developed to wrap the open source package CheckM which consists of a set of tools 
for assessing the quality of genomes recovered from isolates, single cells, or metagenomes. 
CheckM consists of a series of commands in order to support a number of different analyses and workflows.

References: 
CheckM in github: http://ecogenomics.github.io/CheckM/
CheckM docs: https://github.com/Ecogenomics/CheckM/wiki

Parks DH, Imelfort M, Skennerton CT, Hugenholtz P, Tyson GW. 2015. CheckM: assessing the quality of microbial genomes recovered from isolates, single cells, and metagenomes. Genome Research, 25: 1043â€“1055.
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.1"
    GIT_URL = "git@github.com:kbaseapps/kb_Msuite"
    GIT_COMMIT_HASH = "2d550f0b9b1eee2a9c9a131c887d84d3b3a9040f"

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        self.config = config
        self.config['SDK_CALLBACK_URL'] = os.environ['SDK_CALLBACK_URL']
        self.config['KB_AUTH_TOKEN'] = os.environ['KB_AUTH_TOKEN']
        #END_CONSTRUCTOR
        pass


    def run_checkM(self, ctx, params):
        """
        :param params: instance of type "CheckMInputParams" (required params:
           bin_folder: folder path that holds all putative genome files with
           (fa as the file extension) to be checkM-ed out_folder: folder path
           that holds all putative genome files with (fa as the file
           extension) to be checkM-ed checkM_cmd_name: name of the CheckM
           workflow,e.g., lineage_wf or taxonomy_wf workspace_name: the name
           of the workspace it gets saved to. optional params:
           file_extension: the extension of the putative genome file, should
           be "fna" thread: number of threads; default 1) -> structure:
           parameter "bin_folder" of String, parameter "out_folder" of
           String, parameter "checkM_cmd_name" of String, parameter
           "workspace_name" of String, parameter "file_extension" of String,
           parameter "thread" of Long
        :returns: instance of type "CheckMResults" (checkM_results_folder:
           folder path that stores the CheckM results report_name: report
           name generated by KBaseReport report_ref: report reference
           generated by KBaseReport) -> structure: parameter
           "checkM_results_folder" of String, parameter "report_name" of
           String, parameter "report_ref" of String
        """
        # ctx is the context object
        # return variables are: returnVal
        #BEGIN run_checkM
        print('--->\nRunning kb_Msuite.run_checkM\nparams:')
        print(json.dumps(params, indent=1))

        for key, value in params.iteritems():
            if isinstance(value, basestring):
                params[key] = value.strip()

        checkM_runner = CheckMUtil(self.config)
        returnVal = checkM_runner.run_checkM(params)
        #END run_checkM

        # At some point might do deeper type checking...
        if not isinstance(returnVal, dict):
            raise ValueError('Method run_checkM return value ' +
                             'returnVal is not type dict as required.')
        # return the results
        return [returnVal]

    def run_checkM_lineage_wf(self, ctx, params):
        """
        :param params: instance of type "CheckMLineageWfParams" (input_ref -
           reference to the input Assembly or BinnedContigs data (could be
           expanded to include Genome objects as well)) -> structure:
           parameter "input_ref" of String, parameter "workspace_name" of
           String
        :returns: instance of type "CheckMLineageWfResult" -> structure:
           parameter "report_name" of String, parameter "report_ref" of String
        """
        # ctx is the context object
        # return variables are: result
        #BEGIN run_checkM_lineage_wf
        print('--->\nRunning kb_Msuite.run_checkM_lineage_wf\nparams:')
        print(json.dumps(params, indent=1))

        if 'input_ref' not in params:
          raise ValueError('input_ref field was not set in params for run_checkM_lineage_wf')
        if 'workspace_name' not in params:
          raise ValueError('workspace_name field was not set in params for run_checkM_lineage_wf')
        dsu = DataStagingUtils(self.config)
        input_dir = dsu.stage_input(params['input_ref'], 'fna')

        pprint('Staged input directory: ' + input_dir['input_dir'])

        checkM_params = {'bin_folder': input_dir['input_dir'],
                         'out_folder': 'output_' + os.path.basename(input_dir['input_dir']),
                         'checkM_cmd_name': 'lineage_wf',
                         'workspace_name': params['workspace_name'],
                         'thread': 2,
                         'reduced_tree': 1
                         }
        checkM_runner = CheckMUtil(self.config)
        result = checkM_runner.run_checkM(checkM_params)
        #END run_checkM_lineage_wf

        # At some point might do deeper type checking...
        if not isinstance(result, dict):
            raise ValueError('Method run_checkM_lineage_wf return value ' +
                             'result is not type dict as required.')
        # return the results
        return [result]
    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
