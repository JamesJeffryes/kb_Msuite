# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_Msuite(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_checkM(self, params, context=None):
        """
        :param params: instance of type "CheckMInputParams" (required params:
           bin_folder: folder path that holds all putative genome files with
           (fa as the file extension) to be checkM-ed out_folder: folder path
           that holds all putative genome files with (fa as the file
           extension) to be checkM-ed checkM_cmd_name: name of the CheckM
           workflow,e.g., lineage_wf or taxonomy_wf workspace_name: the name
           of the workspace it gets saved to. optional params:
           file_extension: the extension of the putative genome file, should
           be "fna" thread: number of threads; default 1 reduced_tree: if set
           to 1, run checkM with the reduced_tree flag, which will keep
           memory limited to less than 16gb) -> structure: parameter
           "bin_folder" of String, parameter "out_folder" of String,
           parameter "checkM_cmd_name" of String, parameter "workspace_name"
           of String, parameter "file_extension" of String, parameter
           "thread" of Long, parameter "reduced_tree" of type "boolean" (A
           boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "CheckMResults" (checkM_results_folder:
           folder path that stores the CheckM results report_name: report
           name generated by KBaseReport report_ref: report reference
           generated by KBaseReport) -> structure: parameter
           "checkM_results_folder" of String, parameter "report_name" of
           String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_Msuite.run_checkM',
            [params], self._service_ver, context)

    def run_checkM_lineage_wf(self, params, context=None):
        """
        :param params: instance of type "CheckMLineageWfParams" (input_ref -
           reference to the input Assembly or BinnedContigs data (could be
           expanded to include Genome objects as well)) -> structure:
           parameter "input_ref" of String, parameter "workspace_name" of
           String, parameter "save_output_dir" of type "boolean" (A boolean -
           0 for false, 1 for true. @range (0, 1)), parameter
           "save_plots_dir" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "CheckMLineageWfResult" -> structure:
           parameter "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_Msuite.run_checkM_lineage_wf',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_Msuite.status',
                                        [], self._service_ver, context)
